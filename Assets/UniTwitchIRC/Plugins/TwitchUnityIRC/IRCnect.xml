<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IRCnect</name>
    </assembly>
    <members>
        <member name="T:IRCnect.Channel.Interaction.Native.CommandID">
            <summary>
            Ids for the Native commands for the server/host.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Interaction.Native.CommandID.UNKNOWN">
            <summary>
            Command is unknown.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Interaction.Native.CommandID.HELP">
            <summary>
            Format /help
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Interaction.Native.CommandID.ME">
            <summary>
            Format /me {0}
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Interaction.Native.NativeCommands">
            <summary>
            Native commands are those provided by the IRC srever/hosts.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Interaction.Native.NativeCommands.Commands">
            <summary>
            Commands provided by most IRC servers/hosts.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Native.NativeCommands.SendOrInvoke(System.Action{System.String,System.Object[]},System.String,System.Collections.Generic.Dictionary{System.Enum,System.String})">
            <summary>
            Send or Invoke will send the commandMessags if it is a message or invoke the command if it parses into a native command.
            </summary>
            <param name="sendMessage">The method to send the message or command.</param>
            <param name="commandMessage">The message or fully formatted command.</param>
            <param name="commands">The commands list to check against.</param>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Native.NativeCommands.Invoke(System.Action{System.String,System.Object[]},System.String,System.Object,System.Object)">
            <summary>
            Invoke a native command on the server/host.
            </summary>
            <param name="sendMessage">The method to send the message or command.</param>
            <param name="command">The command to call on the server/host.</param>
            <param name="param1">The first parameter if required.</param>
            <param name="param2">The second parameter if required.</param>
        </member>
        <member name="T:IRCnect.Channel.Interaction.PendingMessageArgs">
            <summary>
            Creates a pending message object that contains all relavant information for the message that was not sent.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Interaction.PendingMessageArgs.Empty">
            <summary>
            Empty PendingEventArgs args to used instead of null.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Interaction.PendingMessageArgs.message">
            <summary>
            The pending message
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Interaction.PendingMessageArgs.#ctor(System.String)">
            <summary>
            Constructor
            <para>Creates a pending message object that contains all relevant information for the message that was not sent.</para>
            </summary>
            <param name="message">The full composed message</param>
        </member>
        <member name="T:IRCnect.Channel.Interaction.PendingMessageArgs.EmptyPendingMessageArgs">
            <summary>
            Empty PendingEventArgs args to used instead of null
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Interaction.PendingMessageArgs.EmptyPendingMessageArgs.#ctor">
            <summary>
            Constructor
            <para>Empty PendingEventArgs args to used instead of null</para>
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Actions.ActionsArgs">
            <summary>
            Args used by filters to store parsed actions event data.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.RepliesArgs">
            <summary>
            Args used by filters to store parsed replies catch all data.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.MonitorArgs">
            <summary>
            Args used by filters to store parsed data.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.MonitorArgs.Empty">
            <summary>
            Empty Monitor args to used instead of null.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data passes in before prcessing (usually raw data)</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorArgs.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="obj">Data passes in before processing (usually raw data)
            <para>Uses objects ToString() method to get value.</para></param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="P:IRCnect.Channel.Monitor.MonitorArgs.data">
            <summary>
            Data passes in before processing (usually raw data)
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.RepliesArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data passes in before prcessing (usually raw data)</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.RepliesArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">Data passes in before prcessing (usually raw data)</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Actions.ActionsArgs.type">
            <summary>
            Type of actions this instance represents.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Actions.ActionsArgs.message">
            <summary>
            Any message pulled from the actions event.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes">
            <summary>
            Default actions that are available to filter for.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes._NONE">
            <summary>
            No Action specified.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.CAP_ACK">
            <summary>
            Capabilities were acknowledged.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.CAP_NAK">
            <summary>
            Capabilities were not acknowledged and failed.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.PRIVMSG">
            <summary>
            Message inbound chat.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.WHISPER">
            <summary>
            Message inbound wisper.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.GLOBALUSERSTATE">
            <summary>
            Global chat room state.
            <para>May be specific some IRC rooms only.</para>
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.USERSTATE">
            <summary>
            Gets the user states for the chat room.
            <para>May be specific some IRC rooms only.</para>
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.ROOMSTATE">
            <summary>
            Gets the room states for the chat room.
            <para>May be specific some IRC rooms only.</para>
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.PING">
            <summary>
            Checks for incomming ping test.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.NOTICE">
            <summary>
            Action found a notice in the message.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.ERROR">
            <summary>
            An error occured and was reported by the server/host.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.JOIN">
            <summary>
            Found join event in the message.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.PART">
            <summary>
            Found a pard event in the message.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.NUMERIC_376">
            <summary>
            Found a numeric actions, 376 End of /MOTD
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.NUMERIC_366">
            <summary>
            Found a numeric actions, 366 End of /NAMES
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.All">
            <summary>
            All the actions types in one array.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionTypes.GetLastPart(IRCnect.Channel.Monitor.Replies.Actions.ActionsArgs)">
            <summary>
            Gets the last part of the actions event.
            <para>This is the message after the actual action.</para>
            </summary>
            <param name="actionsArgs">Args to parse for message.</param>
            <returns>The last part of the message if any.</returns>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Actions.ActionsFilter">
            <summary>
            Class providing actions event filter functionality for messages.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.RepliesFilter">
            <summary>
            Basic catch all filter
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.MonitorFilter">
            <summary>
            Abstract class providing basic filter functionality for messages.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.MonitorFilter.PATTERN_ALL">
            <summary>
            Pattern to match against all inputs.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.MonitorFilter.Empty">
            <summary>
            Empty Monitor filter to use instead of null.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.MonitorFilter.m_Filters">
            <summary>
            Filters for matching used in derived classes.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.MonitorFilter.m_RawInput">
            <summary>
            Raw Input provided for message matching.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.MonitorFilter.m_Regex">
            <summary>
            Regular expressions used for initial filter match
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorFilter.AddFilter(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds filters to look for in incoming messages.
            </summary>
            <param name="format">Format for compiling the regex.</param>
            <param name="item">String item to match against the pattern.</param>
            <param name="regexOptions">Any options to modify matching.</param>
            <param name="callbacks">Callbacks to invoke upon filtered.</param>
            <returns>MonitorFilter type to chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorFilter.GetFilterCallbacks(System.Text.RegularExpressions.Regex)">
            <summary>
            Gets a filter from the collection based on the key
            </summary>
            <param name="regex">Filters collection key</param>
            <returns>Action callbacks</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorFilter.Parse(System.String)">
            <summary>
            Abstract mothod to parse messages for detailed data.
            </summary>
            <param name="message">Message to be parsed.</param>
            <returns>Parsed message container as Event args.</returns>
        </member>
        <member name="P:IRCnect.Channel.Monitor.MonitorFilter.regex">
            <summary>
            Regular expressions used for initial filter match
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.MonitorFilter.rawInput">
            <summary>
            Raw Input provided for message matching.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.RepliesFilter.RAW_SEPARATOR">
            <summary>
            Seperator to devide multiple entries.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.RepliesFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.RepliesFilter.Parse(System.String)">
            <summary>
            Return raw chat message
            </summary>
            <param name="message">Raw chat response message to parse</param>
            <returns>Message interface</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.RepliesFilter.AddRepliesFilter(System.Collections.Generic.IEnumerable{System.String},System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a list of greetings to the statement check list
            <para>NOTE: Greeting checks added this way use RegexOptions.IgnoreCase</para>
            </summary>
            <param name="messages">List of greetings to check for</param>
            <param name="callbacks">Callbacks to invoke on greetings filtered</param>
            <returns>RepliesFilter type to chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.RepliesFilter.FilterAll(System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds all default filters to the check list.
            </summary>
            <param name="callbacks">Callbacks to invoke upon filtered.</param>
            <returns>RepliesFilter type to chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsFilter.Parse(System.String)">
            <summary>
            Return raw chat message
            </summary>
            <param name="message">Raw chat response message to parse</param>
            <returns>Message interface</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsFilter.AddActionsFilters(System.Collections.Generic.IEnumerable{System.String},System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a list of greetings to the statement check list
            <para>NOTE: Actions checks added this way use case sensitive regex</para>
            </summary>
            <param name="actionTypes">List of actions to check for.  Use one of the ActionTypes in the RCnect.Channel.Monitor.Replies.Actions namespace.</param>
            <param name="callbacks">Callbacks to invoke on action filtered</param>
            <returns>ActionsFilter type to chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsFilter.FilterAll(System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Filter all adds all the default filters to the list to check for.
            </summary>
            <param name="callbacks">Callbacks to invoke upon filtered.</param>
            <returns>ActionsFilter type to chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Actions.ActionsFilter.AddRepliesFilter(System.Collections.Generic.IEnumerable{System.String},System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a list of replies to check for.
            </summary>
            <param name="messages">Messages to check for.</param>
            <param name="callbacks">Callbacks to invoke upon filtered.</param>
            <returns>RepliesFilter type to chain filter additions.</returns>
        </member>
        <member name="T:IRCnect.Connection.Client">
            <summary>
            Client holds reference to the TcpClient used to connect to the IRC server/host
            </summary>
        </member>
        <member name="M:IRCnect.Connection.Client.#ctor">
            <summary>
            Constructor
            <para>Initialization is done in the OpenConnection() function call.</para>
            </summary>
        </member>
        <member name="M:IRCnect.Connection.Client.OpenConnection(System.String,System.Int32)">
            <summary>
            Initializes and opens the TcpClient connection.
            </summary>
            <param name="hostname">IRC host name that will be connected to.</param>
            <param name="port">Port to use to provide a gateway for connection.</param>
        </member>
        <member name="M:IRCnect.Connection.Client.CloseConnection">
            <summary>
            Closes the client connection stream.
            </summary>
        </member>
        <member name="M:IRCnect.Connection.Client.Dispose">
            <summary>
            Closes connection and stream.
            <para>IDisposable reqirements, user shold never have to call this method. Use CloseConnection() instead.</para>
            </summary>
        </member>
        <member name="P:IRCnect.Connection.Client.hostname">
            <summary>
            IRC host name that will be connected to.
            </summary>
        </member>
        <member name="P:IRCnect.Connection.Client.port">
            <summary>
            Port to use to provide a gateway for connection.
            </summary>
        </member>
        <member name="P:IRCnect.Connection.Client.reader">
            <summary>
            Stream reader to read IRC communication stream.
            </summary>
        </member>
        <member name="P:IRCnect.Connection.Client.writer">
            <summary>
            Stream writer to write to the IRC communication stream.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.RoomVisitor">
            <summary>
            Abstract class providing main functionality to connect to chat channels.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.RoomVisitor.#ctor(System.String,System.IO.StreamWriter,System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="nick">Who is connecting, nick name.</param>
            <param name="writer">Stream writer to write to the IRC comunication stream.</param>
            <param name="realName">Real name, recommended to use an alias and NOT a Real name.</param>
            <param name="mode">Connection mode (Leave alone if you are not sure).</param>
        </member>
        <member name="M:IRCnect.Channel.RoomVisitor.Connect(System.String)">
            <summary>
            Connect to the IRC server/host.
            </summary>
            <param name="pass">Authorization key or password.</param>
        </member>
        <member name="M:IRCnect.Channel.RoomVisitor.JoinRoom(System.String)">
            <summary>
            Join a chat room.
            </summary>
            <param name="channel">Channel to join.</param>
        </member>
        <member name="M:IRCnect.Channel.RoomVisitor.PartRoom(System.String)">
            <summary>
            Leave a chat room.
            </summary>
            <param name="channel">Channel room to part.</param>
        </member>
        <member name="P:IRCnect.Channel.RoomVisitor.nick">
            <summary>
            Who is connecting, nick name.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.RoomVisitor.writer">
            <summary>
            Stream writer to write to the IRC comunication stream.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.RoomVisitor.realName">
            <summary>
            Real name, recommended to use an alias and NOT a Real name.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Interaction.Messenger">
            <summary>
            Abstract class providing the functionality for sending messages along the IRC stream.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Messenger.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Messenger.#ctor(System.IO.StreamWriter)">
            <summary>
            Constructor
            </summary>
            <param name="writer">IRC stream writer to write to the IRC stream.</param>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Messenger.Send(System.String,System.Object[])">
            <summary>
            Sends a message along the IRC stream.
            <para>This method is throttled and can be controlled with the SendDelaySeconds property.</para>
            </summary>
            <param name="message">Message to send.</param>
            <param name="args">Parameters if message contains formatting.</param>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Messenger.SendUnsafe(System.String,System.Object[])">
            <summary>
            Sends a message along the IRC stream.
            <para>NOTE: Use Send(message, args) if you don't know which send method to use.</para>
            <para>WARNING: Use this method with caution as it is not thorttled and will send messages as called.  This may exceed the allowed quota per minute.</para>
            </summary>
            <param name="message">Message to send.</param>
            <param name="args">Parameters if message contains formatting.</param>
        </member>
        <member name="M:IRCnect.Channel.Interaction.Messenger.PreparedMessage(System.String)">
            <summary>
            Hook to prepare the message for sending.
            <para>Provided to allow for IRC specific message formats.</para>
            </summary>
            <param name="message">Message to prepare for sending.</param>
            <returns>A prepared message for derived class IRC connection.</returns>
        </member>
        <member name="P:IRCnect.Channel.Interaction.Messenger.SendDelaySeconds">
            <summary>
            Delay to wait between allowing a send message method call.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Interaction.Messenger.CanSendMessage">
            <summary>
            Has throttle timer elapsed and a message can be sent.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Interaction.Messenger.writer">
            <summary>
            Sets the local stream writer.
            </summary>
        </member>
        <member name="E:IRCnect.Channel.Interaction.Messenger.onMessagePending">
            <summary>
            Invokes each time an attempt to send a message and the throttle was not at zero and send message did not send the message.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.IMonitor">
            <summary>
            Interface to monitor IRC incoming stream.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.IMonitor.Monitor">
            <summary>
            The call to monitor the incoming IRC stream.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.IMonitor.IsInitialized">
            <summary>
            Is the monitor initialized.
            <para>Usually meaning the reader is initialized.</para>
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.IMonitorBase">
            <summary>
            Interface for IRC inbound stream reader.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.IMonitorBase.Parse(System.String)">
            <summary>
            The parser for the stream information.
            </summary>
            <param name="message">The incomming message.</param>
            <returns>List of the data parsed for the filters.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.IMonitorBase.ReadLine">
            <summary>
            Reads a line for the IRC stream.
            </summary>
            <returns>Returns the IRC line read.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.IMonitorBase.TryGet(System.String@)">
            <summary>
            Try to read the message for the IRC stream.
            </summary>
            <param name="message">The incoming message.</param>
            <returns>True if there was a message on the stream, False if not.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.IMonitorBase.InvokeRecieved(IRCnect.Channel.Monitor.MonitorArgs)">
            <summary>
            Invoke all subscribed events for data received.
            </summary>
            <param name="monitorArgs">Data to send for</param>
        </member>
        <member name="E:IRCnect.Channel.Monitor.IMonitorBase.onReceived">
            <summary>
            Event invoked when a message is received from the iIRC stream.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.IMonitorBase.Filters">
            <summary>
            Filters used to check the stream for specific information.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs">
            <summary>
            Args used by filters to store parsed command data.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs">
            <summary>
            Args used by filters to store parsed inbound data.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.m_Greeting">
            <summary>
            Greeting if found in the matching/parsing.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.#ctor(System.Text.RegularExpressions.Match)">
            <summary>
            Constructor
            </summary>
            <param name="messageMatch">Previously match data for further parsing/matching.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.messageMatch">
            <summary>
            Match expression if match was successful.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.nick">
            <summary>
            Nick name of the user found in the parsed message.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.channel">
            <summary>
            Channel the message came from.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.said">
            <summary>
            What was said in the message.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsArgs.greeting">
            <summary>
            Greeting if found in the matching/parsing.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs.#ctor(System.Text.RegularExpressions.Match)">
            <summary>
            Constructor
            </summary>
            <param name="messageMatch">Previously match data for further parsing/matching.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs.command">
            <summary>
            Command if found in the matching/parsing.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs.argument">
            <summary>
            Argument if it exists in the command message.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs.nArgument">
            <summary>
            Multiple arguments if they exists in the command message.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsArgs.greeting">
            <summary>
            Greeting if found in the matching/parsing
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter">
            <summary>
            Class providing user commands filter functionality for messages.
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsFilter">
            <summary>
            Class providing inbounds filter functionality for messages.
            </summary>
        </member>
        <member name="F:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsFilter.MESSAGE_PATTERN">
            <summary>
            Pattern to match for incomming message.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsFilter.Parse(System.String)">
            <summary>
            Parse a chat message and returns matched expresions
            </summary>
            <param name="message">Raw chat response message to parse</param>
            <returns>Matched expressions class</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsFilter.GetNewArgs(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the specific type of args required for this class to store data.
            <para>Override to provide unique class interface args.</para>
            </summary>
            <param name="match">The match that will be preformed.</param>
            <returns>Args used by filters to store parsed data.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.InboundsFilter.AddBasicGreetings(System.Collections.Generic.IEnumerable{System.String},System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a list of greetings to the statement check list
            <para>NOTE: Greeting checks added this way use RegexOptions.IgnoreCase</para>
            </summary>
            <param name="greetings">List of greetings to check for</param>
            <param name="callbacks">Callbacks to invoke on greetings filtered</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.GetNewArgs(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the specific type of args required for this class to store data.
            <para>Override to provide unique class interface args.</para>
            </summary>
            <param name="match">The match that will be preformed.</param>
            <returns>Args used by filters to store parsed data.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.AddBasicCommand(System.String,System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a command to the statement check list
            <para>NOTE: Command checks added this way are case sensitive</para>
            </summary>
            <param name="command">Command to add to list.  Exclude the !, this will be automatically added.</param>
            <param name="callbacks">Callbacks to invoke on commands filtered</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.AddParameterizedCommand(System.String,System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a command to the statement check list and checks for a single parameter.
            </summary>
            <param name="command">Command to add to list.  Exclude the !, this will be automatically added.</param>
            <param name="callbacks">Callbacks to invoke on commands filtered</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.AddNParameterCommand(System.String,System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a command to the statement check list and checks for a n number of parameter
            <para>Will not check for a no parameters</para>
            <para>NOTE: Seperate arguments with spaces. Command checks added this way are case sensitive.</para>
            </summary>
            <param name="command">Command to add to list.  Exclude the !, this will be automatically added.</param>
            <param name="callbacks">Callbacks to invoke on commands filtered</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.AddBasicGreetings(System.Collections.Generic.IEnumerable{System.String},System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a list of greetings to the statement check list
            <para>NOTE: Greeting checks added this way use RegexOptions.IgnoreCase</para>
            </summary>
            <param name="greetings">List of greetings to check for</param>
            <param name="callbacks">Callbacks to invoke on greetings filtered</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.AddRepliesFilter(System.Collections.Generic.IEnumerable{System.String},System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds a list of greetings to the statement check list
            <para>NOTE: Greeting checks added this way use RegexOptions.IgnoreCase</para>
            </summary>
            <param name="messages">List of greetings to check for</param>
            <param name="callbacks">Callbacks to invoke on greetings filtered</param>
            <returns>RepliesFilter type to chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Commands.CommandsFilter.FilterAll(System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Adds all default filters to the check list.
            </summary>
            <param name="callbacks">Callbacks to invoke upon filtered.</param>
            <returns>RepliesFilter type to chain filter additions.</returns>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksArgs">
            <summary>
            Args used by filters to store parsed link data.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksArgs.#ctor(System.Text.RegularExpressions.Match)">
            <summary>
            Constructor
            </summary>
            <param name="messageMatch">Previously match data for further parsing/matching.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksArgs.MatchFilters(System.Collections.Generic.Dictionary{System.Text.RegularExpressions.Regex,System.Action{IRCnect.Channel.Monitor.MonitorArgs}})">
            <summary>
            Compares data to filters for matches of specific data.
            </summary>
            <param name="filters">Filters to match data against.</param>
        </member>
        <member name="P:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksArgs.link">
            <summary>
            Link found during the matching/parsing
            </summary>
        </member>
        <member name="T:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksFilter">
            <summary>
            Class providing links filter functionality for messages.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksFilter.#ctor(System.String)">
            <summary>
            Constructor 
            </summary>
            <param name="pattern">Regular expressions pattern to match against input.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksFilter.GetNewArgs(System.Text.RegularExpressions.Match)">
            <summary>
            Gets the specific type of args required for this class to store data.
            <para>Override to provide unique class interface args.</para>
            </summary>
            <param name="match">The match that will be preformed.</param>
            <returns>Args used by filters to store parsed data.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.Replies.Inbounds.Links.LinksFilter.UseDefaultLinkFilter(System.Action{IRCnect.Channel.Monitor.MonitorArgs}[])">
            <summary>
            Applies default link filter.
            <para>Matches against links contained in the message.</para>
            </summary>
            <param name="callbacks">Callbacks to invoke upon filtered.</param>
            <returns>LinksFilter type to chain filter additions.</returns>
        </member>
        <member name="T:IRCnect.Channel.Monitor.MonitorBase">
            <summary>
            Base class for IRC inbound stream reader.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.#ctor(System.IO.StreamReader,IRCnect.Channel.Monitor.MonitorFilter[])">
            <summary>
            Constructor
            </summary>
            <param name="reader">Reader to read the IRC stream.</param>
            <param name="filters">Filters to add derived from MonitorFilters.</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.ImportantFilters(IRCnect.Channel.Monitor.MonitorFilter,IRCnect.Channel.Monitor.MonitorFilter,IRCnect.Channel.Monitor.MonitorFilter)">
            <summary>
            Add a set of important filters to the monitor.
            </summary>
            <param name="error">Error filter to add to the monitor.</param>
            <param name="notice">Notice filter to add to the monitor.</param>
            <param name="ping">Ping filter to add to the monitor.</param>
            <returns>The Monitor for chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.AddFilters(IRCnect.Channel.Monitor.MonitorFilter[])">
            <summary>
            Adds filters to filter the incoming message.
            </summary>
            <param name="filters">Filters to add derived from MonitorFilters.</param>
            <returns>The Monitor for chain filter additions.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.Parse(System.String)">
            <summary>
            The parser for the stream information.
            </summary>
            <param name="message">The incoming message.</param>
            <returns>List of the data parsed for the filters.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.ReadLine">
            <summary>
            Reads a line for the IRC stream.
            </summary>
            <returns>Returns the IRC line read.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.TryGet(System.String@)">
            <summary>
            Try to read the message for the IRC stream.
            </summary>
            <param name="message">The incoming message.</param>
            <returns>True if there was a message on the stream, False if not.</returns>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.InvokeRecieved(IRCnect.Channel.Monitor.MonitorArgs)">
            <summary>
            Invoke all subscribed events for data received.
            </summary>
            <param name="monitorArgs">Data to send for</param>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.Monitor">
            <summary>
            The call to monitor the incoming IRC stream.
            </summary>
        </member>
        <member name="M:IRCnect.Channel.Monitor.MonitorBase.ConsumeMessage(System.String)">
            <summary>
            Consume/use the message before it is sent for parsing and matching by the filters.
            </summary>
            <param name="message">The incoming message.</param>
            <returns>True if the message was consumed, False if the message should be parsed and matched.</returns>
        </member>
        <member name="E:IRCnect.Channel.Monitor.MonitorBase.OnReceived">
            <summary>
            Event invoked when a message is received from the IRC stream.
            </summary>
        </member>
        <member name="E:IRCnect.Channel.Monitor.MonitorBase.onReceived">
            <summary>
            Event invoked when a message is received from the IRC stream.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.MonitorBase.Filters">
            <summary>
            Filters used to check the stream for specific information.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.MonitorBase.LogMonitor">
            <summary>
            Method to log all messages that pass through the monitor if NOT consumed by a derived class.
            </summary>
        </member>
        <member name="P:IRCnect.Channel.Monitor.MonitorBase.IsInitialized">
            <summary>
            The monitor is initialized when both streams are not null.
            </summary>
        </member>
        <member name="T:IRCnect.Connection.Protocol">
            <summary>
            Helper class containing connection and required IRC protocols.
            <para>Predifined preformatted strings to interact with IRC clients/servers.</para>
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.CHANNEL_PREFIX">
            <summary>
            Channel prefix used #
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.JOIN">
            <summary>
            Connection join prefix with channel #prefix identifier.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PART">
            <summary>
            Connection part prefix with channel #prefix identifier.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PING_COMMAND">
            <summary>
            Connection ping prefix.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PING_MESSAGE">
            <summary>
            Connection ping prefix with colon (:).
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PING_REQUEST_FORMAT">
            <summary>
            Connection ping prefix format PING {0} {1}.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PONG_COMMAND">
            <summary>
            Connection pong prefix.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PONG_MESSAGE">
            <summary>
            Connection pong prefix with colon (:).
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PONG_REQUEST_FORMAT">
            <summary>
            Connection pong prefix format PONG {0} {1}.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.MODE">
            <summary>
            Sets/Gets user mode
            <para>Default 8 (i - marks a users as invisible)</para>
            <para>Refer to Internet Relay Chat: Client Protocol for all user modes</para>
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PASS">
            <summary>
            Connection password prefix.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.NICK">
            <summary>
            Connection nick (Nick Name) prefix.
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PRIVMSG_FORMAT">
            <summary>
            Example below
            <para>:Angel!wings@irc.org PRIVMSG Wiz :Are you receiving this message?</para>
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.PRIVMSG_FORMAT_SHORT">
            <summary>
            Shorter form for sending a message to an IRC channel
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.WHISPER_FORMAT">
            <summary>
            Example below
            <para>:Angel!wings@irc.org WHISPER Wiz :Are you receiving a wisper this message?</para>
            </summary>
        </member>
        <member name="F:IRCnect.Connection.Protocol.WHISPER_FORMAT_SHORT">
            <summary>
            Shorter form for sending a wisper message to an IRC channel
            </summary>
        </member>
        <member name="M:IRCnect.Connection.Protocol.GetUserFormat(System.Int32)">
            <summary>
            Parameter {0} username and {1} realname may contain spaces
            </summary>
            <param name="mode">Refer to Internet Relay Chat: Client Protocol for all user modes
            <para>Default 8 (i - marks a users as invisible)</para></param>
            <returns>Format for the user string to connect to IRC server.</returns>
        </member>
        <member name="M:IRCnect.Connection.Protocol.NickConnectionStrings(System.String,System.String,System.Int32,System.String)">
            <summary>
            Connections strings to connect to an IRC channel.
            <para>These are general purpose connection requirements for MOST IRC servers/hosts.</para>
            </summary>
            <param name="nick">Who is connecting, nick name.</param>
            <param name="oauth">Authorization key or password.</param>
            <param name="mode">Connection mode (Leave alone if you are not sure).</param>
            <param name="realName">Real name, recommended to use an alias and NOT a Real name.</param>
            <returns>Array of prepares connection strings.</returns>
        </member>
        <member name="T:IRCnect.Utils.Logger">
            <summary>
            General logger utility.
            <para>Logs to various outputs file, memory and console.</para>
            </summary>
        </member>
        <member name="F:IRCnect.Utils.Logger.MASTER_LOG_FILE">
            <summary>
            Name for master IRCnect log file
            </summary>
        </member>
        <member name="F:IRCnect.Utils.Logger.AllLogTracking">
            <summary>
            Turns all log tracking on/off
            </summary>
        </member>
        <member name="M:IRCnect.Utils.Logger.SetMemoryLogger(System.Collections.Generic.List{System.String})">
            <summary>
            Sets the custom callback for the Customlogger.
            </summary>
            <param name="memoryLogger">Memory structure to lag data.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.M(System.String)">
            <summary>
            M Memory, logs to memory.
            <para>NOTE: Recommended to call FlushM() to not lose logged data.</para>
            </summary>
            <param name="value">A System.String to log.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.M(System.String,System.Object[])">
            <summary>
            M Memory, logs to memory.
            <para>NOTE: Recommended to call FlushM() to not lose logged data.</para>
            </summary>
            <param name="format">A composite format string/</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.FlushM(System.Action{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            How to output the memory logger's data.
            </summary>
            <param name="how">Method that will persist the memory data.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.SetCustomLogger(System.Action{System.String})">
            <summary>
            Sets the custom callback for the Customlogger.
            </summary>
            <param name="customLogger">Method to invoke when logging data.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.C(System.String)">
            <summary>
            C Custom, logs through custom function call.
            </summary>
            <param name="value">A System.String to log.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.C(System.String,System.Object[])">
            <summary>
            C Custom, logs through custom function call.
            </summary>
            <param name="format">A composite format string/</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.L(System.String)">
            <summary>
            L Log Console, logs input to the Console
            </summary>
            <param name="value">A System.String to log.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.L(System.String,System.Object[])">
            <summary>
            L Log Console, logs input to the Console.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.SetFileName(System.String)">
            <summary>
            Sets the filename for F Log to File.
            </summary>
            <param name="fileName">Filename of where to log the data.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.F(System.String)">
            <summary>
            F Log File, logs input to a file.
            </summary>
            <param name="value">A System.String to log.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.F(System.String,System.Object[])">
            <summary>
            F Log File, logs input to a file.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.F(System.String,System.String)">
            <summary>
            F Log File, logs input to a file.
            </summary>
            <param name="fileName">Filename to log the data.</param>
            <param name="value">A System.String to log.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.F(System.String,System.String,System.Object[])">
            <summary>
            F Log File, logs input to a file.
            </summary>
            <param name="fileName">Filename to log the data.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:IRCnect.Utils.Logger.FlushToLog(System.Char,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Writes values to a file.
            </summary>
            <param name="key">Log function key one of {'F', 'L', 'C', '*'} * is reserved for the master file identifer.</param>
            <param name="values">Values to los to file.</param>
            <param name="fileName">Name opf file to store information.</param>
        </member>
        <member name="T:IRCnect.Utils.StreamIRC">
            <summary>
            Helper class to write to a stream and flush the stream after writing all lines.
            </summary>
        </member>
        <member name="M:IRCnect.Utils.StreamIRC.WriteAllLines(System.IO.StreamWriter,System.String[])">
            <summary>
            Writes unformatted text to the chat stream
            <para>Use a method prefixed with Send to send messages and commands.</para>
            </summary>
            <param name="stream">StreamWriter to write to</param>
            <param name="lines">Lines to write to stream</param>
            <exception cref="T:System.ApplicationException">Thrown when writer fails.</exception>
        </member>
        <member name="T:IRCnect.Workers.IWorker">
            <summary>
            Worker interface to mainly handle Monitor reading.
            </summary>
        </member>
        <member name="M:IRCnect.Workers.IWorker.Run">
            <summary>
            Starts the worker
            </summary>
        </member>
        <member name="M:IRCnect.Workers.IWorker.Stop">
            <summary>
            Stops the active worker..
            </summary>
        </member>
        <member name="P:IRCnect.Workers.IWorker.IsRunning">
            <summary>
            Worker has been started and is running.
            </summary>
        </member>
        <member name="T:IRCnect.Workers.Worker">
            <summary>
            Worker to mainly handle Monitor reading.
            </summary>
        </member>
        <member name="M:IRCnect.Workers.Worker.Run">
            <summary>
            Starts the worker
            </summary>
        </member>
        <member name="M:IRCnect.Workers.Worker.Stop">
            <summary>
            Stops the active worker..
            <para>Override to provide addition stop instructions.</para>
            </summary>
        </member>
        <member name="P:IRCnect.Workers.Worker.IsRunning">
            <summary>
            Worker has been started and is running.
            </summary>
        </member>
    </members>
</doc>
